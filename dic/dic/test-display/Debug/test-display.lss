
test-display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000128  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bae  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ac9  00000000  00000000  00000df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ab  00000000  00000000  000018bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000521  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ea  00000000  00000000  000020f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000021df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  68:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  6c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  70:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  74:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  78:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  7c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  80:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  84:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  88:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  8c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  90:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e8 e2       	ldi	r30, 0x28	; 40
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <__do_copy_data+0x10>
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a8 30       	cpi	r26, 0x08	; 8
  b2:	b1 07       	cpc	r27, r17
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0xc>
  b6:	0e 94 89 00 	call	0x112	; 0x112 <main>
  ba:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <initPorts>:
	0x0C, //display on
};

void initPorts(void)                                                 //initialises the needed ports
{
	DDRE = 0xFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	8d b9       	out	0x0d, r24	; 13
	DDRC = (1<<PC0) | (1<<PC1) | (1<<PC2);
  c6:	87 e0       	ldi	r24, 0x07	; 7
  c8:	87 b9       	out	0x07, r24	; 7
	PORTC = 0;
  ca:	18 b8       	out	0x08, r1	; 8
	PORTE = 0;
  cc:	1e b8       	out	0x0e, r1	; 14
  ce:	08 95       	ret

000000d0 <dsp_writedata>:
};

void dsp_writedata(uint8_t data,uint8_t rs) //writes data on the 8 Datapins for the 8 bit communication and the rs Pins
{
	//PORTE as Output
	PORTE = data;
  d0:	8e b9       	out	0x0e, r24	; 14
	
	//SETS THE RS PIN
	if (rs==1)
  d2:	61 30       	cpi	r22, 0x01	; 1
  d4:	11 f4       	brne	.+4      	; 0xda <dsp_writedata+0xa>
	PORTC |= (1<<PC0);
  d6:	40 9a       	sbi	0x08, 0	; 8
  d8:	01 c0       	rjmp	.+2      	; 0xdc <dsp_writedata+0xc>
	else
	PORTC &= ~(1<<PC0);
  da:	40 98       	cbi	0x08, 0	; 8


	//Sets enable high
	PORTC |= (1<<PC2);
  dc:	42 9a       	sbi	0x08, 2	; 8
  de:	84 e6       	ldi	r24, 0x64	; 100
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	01 97       	sbiw	r24, 0x01	; 1
	//Sets enable low
	for(int wait = 0; wait<100; wait++){}
  e4:	f1 f7       	brne	.-4      	; 0xe2 <dsp_writedata+0x12>
	PORTC &= ~(1<<PC2);
  e6:	42 98       	cbi	0x08, 2	; 8
  e8:	08 95       	ret

000000ea <dsp_initdsp>:
	//This is doen so thta the display will read the data pins and process them
}

void dsp_initdsp()
{
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	c0 e0       	ldi	r28, 0x00	; 0
  f4:	d1 e0       	ldi	r29, 0x01	; 1
  f6:	07 e0       	ldi	r16, 0x07	; 7
  f8:	11 e0       	ldi	r17, 0x01	; 1
	//init the display with commands in dsp_command array
	for (int i=0; i<7;i++){
		dsp_writedata(dsp_command[i],0);
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	89 91       	ld	r24, Y+
  fe:	0e 94 68 00 	call	0xd0	; 0xd0 <dsp_writedata>
}

void dsp_initdsp()
{
	//init the display with commands in dsp_command array
	for (int i=0; i<7;i++){
 102:	c0 17       	cp	r28, r16
 104:	d1 07       	cpc	r29, r17
 106:	c9 f7       	brne	.-14     	; 0xfa <dsp_initdsp+0x10>
		dsp_writedata(dsp_command[i],0);
	}
	
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	08 95       	ret

00000112 <main>:


int main(void)
{
    /* Replace with your application code */
	initPorts();
 112:	0e 94 61 00 	call	0xc2	; 0xc2 <initPorts>
	dsp_initdsp();
 116:	0e 94 75 00 	call	0xea	; 0xea <dsp_initdsp>

    while (1) 
    {

	dsp_writedata('A',1);
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	0e 94 68 00 	call	0xd0	; 0xd0 <dsp_writedata>
    }
 122:	fb cf       	rjmp	.-10     	; 0x11a <main+0x8>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
